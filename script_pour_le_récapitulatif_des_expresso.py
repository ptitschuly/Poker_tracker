# -*- coding: utf-8 -*-
"""Script pour le récapitulatif des Expresso

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XThBDTFMaltXJ8J__e88_LjkTmZzfXLf
"""

import os
import re
import matplotlib.pyplot as plt
from datetime import datetime

def generate_expresso_summary():
    """
    Parcourt un dossier, lit les fichiers "summary" et génère un récapitulatif
    à partir des fichiers de l'historique de poker Expresso.
    Permet de filtrer les données par date.
    Crée un graphique de l'évolution du profit cumulé, gains et pertes.
    Sauvegarde un tableau récapitulatif par partie incluant le prizepool dans un fichier texte.
    """
    # Demande à l'utilisateur le chemin du dossier contenant les fichiers Expresso
    expresso_dir = input("Entrez le chemin complet du dossier 'Expresso_Historique' : ")

    # Vérifie si le dossier existe
    if not os.path.isdir(expresso_dir):
        print(f"Erreur : Le dossier '{expresso_dir}' n'existe pas.")
        return

    # Ask the user if they want to include Freeroll games
    include_freerolls_input = input("Inclure les parties 'Freeroll' dans l'analyse ? (oui/non) : ").lower()
    include_freerolls = include_freerolls_input == 'oui'

    # Ask for date range
    start_date_str = input("Entrez la date de début pour l'analyse (YYYYMMDD), laissez vide pour aucune restriction : ")
    end_date_str = input("Entrez la date de fin pour l'analyse (YYYYMMDD), laissez vide pour aucune restriction : ")

    start_date = None
    end_date = None

    if start_date_str:
        try:
            start_date = datetime.strptime(start_date_str, '%Y%m%d')
        except ValueError:
            print("Format de date de début invalide. L'analyse ne sera pas filtrée par date de début.")

    if end_date_str:
        try:
            end_date = datetime.strptime(end_date_str, '%Y%m%d')
        except ValueError:
            print("Format de date de fin invalide. L'analyse ne sera pas filtered by end date.")


    print("\n--- Analyse des fichiers Expresso en cours ---")

    total_files_processed = 0
    freeroll_files_skipped = 0
    files_outside_date_range_skipped = 0


    # Listes pour stocker les résultats de chaque partie
    all_game_details = []


    # Parcourt chaque fichier dans le dossier
    for filename in os.listdir(expresso_dir):
        file_path = os.path.join(expresso_dir, filename)

        # S'assure de ne traiter que les fichiers et skip if it's a Freeroll and user chose not to include
        if os.path.isfile(file_path):
            if not include_freerolls and "Freeroll" in filename:
                freeroll_files_skipped += 1
                continue # Skip this file if it's a Freeroll and user doesn't want to include them

            # Extract date from filename
            date_match = re.match(r"(\d{8})", filename)
            file_date = None
            if date_match:
                try:
                    file_date = datetime.strptime(date_match.group(1), '%Y%m%d')
                except ValueError:
                    pass # Invalid date format in filename

            # Skip if outside date range
            if file_date and ((start_date and file_date < start_date) or (end_date and file_date > end_date)):
                 files_outside_date_range_skipped += 1
                 continue


            total_files_processed += 1

            try:
                with open(file_path, 'r', encoding='utf-8') as file:
                    lines = file.readlines()

                    buy_in = 0.0
                    prizepool = 0.0
                    winnings = 0.0
                    net_profit = 0.0

                    if len(lines) >= 14:
                        # Parsing de la 3ème ligne pour le Buy-In
                        line3 = lines[2].strip()
                        if "Buy-In" in line3:
                            buy_in_matches = re.findall(r"(\d+\.?\d*)€", line3) # Modified regex
                            if len(buy_in_matches) == 2:
                                buy_in = float(buy_in_matches[0]) + float(buy_in_matches[1])

                        # Parsing de la 10ème ligne pour le Prizepool
                        line10 = lines[9].strip()
                        if "Prizepool" in line10:
                            prizepool_match = re.search(r"(\d+\.?\d*)€", line10) # Modified regex
                            if prizepool_match:
                                prizepool = float(prizepool_match.group(1))

                        # Parsing de la 13ème et 14ème ligne pour les gains
                        line13 = lines[12].strip()
                        if "You finished in 1st place" in line13:
                            line14 = lines[13].strip()
                            winnings_match = re.search(r"You won (\d+\.?\d*)€", line14)
                            if winnings_match:
                                winnings = float(winnings_match.group(1))

                    # Calcul du profit net pour la partie
                    net_profit = winnings - buy_in

                    all_game_details.append({
                        'filename': filename,
                        'date': file_date, # Store the date
                        'buy_in': buy_in,
                        'prizepool': prizepool,
                        'winnings': winnings,
                        'net_profit': net_profit
                    })


            except Exception as e:
                pass # Removed the print statement for file reading/parsing errors

    # Sort game details by date before processing
    all_game_details.sort(key=lambda x: x['date'] if x['date'] else datetime.min)


    # Filter data based on the sorted game details
    game_details = all_game_details
    summary_data = [game['net_profit'] for game in game_details]
    winnings_data = [game['winnings'] for game in game_details]
    losses_data = [game['buy_in'] for game in game_details]


    # Vérifie si des données ont été traitées après filtrage
    if not game_details:
        print("Aucune session valide n'a pu être analysée pour la période spécifiée.")
        if freeroll_files_skipped > 0:
             print(f"({freeroll_files_skipped} Freeroll files were skipped as per your choice.)")
        if files_outside_date_range_skipped > 0:
             print(f"({files_outside_date_range_skipped} files were skipped as they were outside the specified date range.)")

        return


    # Calcul du profit total cumulé
    cumulative_profit = [sum(summary_data[:i+1]) for i in range(len(summary_data))]
    cumulative_winnings = [sum(winnings_data[:i+1]) for i in range(len(winnings_data))]
    cumulative_losses = [sum(losses_data[:i+1]) for i in range(len(losses_data))]


    # --- Définition du dossier de destination ---
    output_dir = r"C:\Users\schut\Documents\Projet_Winamax"
    os.makedirs(output_dir, exist_ok=True)

    # --- Étape 1: Création et sauvegarde du graphique ---
    plt.figure(figsize=(10, 6))
    plt.plot(cumulative_profit, marker='o', linestyle='-', color='b', label='Profit Net Cumulé')
    plt.plot(cumulative_winnings, marker='o', linestyle='-', color='g', label='Gains Cumulés')
    plt.plot(cumulative_losses, marker='o', linestyle='-', color='r', label='Pertes Cumulées (Buy-in)')
    plt.title('Évolution du Profit Total Cumulé des Expresso, Gains et Pertes', fontsize=16)
    plt.xlabel('Partie #', fontsize=12)
    plt.ylabel('Montant (€)', fontsize=12)
    plt.grid(True)
    plt.axhline(0, color='grey', linestyle='--') # Ligne de référence à 0
    plt.legend()

    # Add date range to chart title if filtered
    date_range_title = ""
    if start_date or end_date:
        start_str = start_date.strftime('%Y-%m-%d') if start_date else "Début"
        end_str = end_date.strftime('%Y-%m-%d') if end_date else "Fin"
        date_range_title = f" ({start_str} à {end_str})"

    plt.title(f'Évolution du Profit Total Cumulé des Expresso, Gains et Pertes{date_range_title}', fontsize=16)

    # Add labels to the last point of each curve
    if cumulative_profit: # Ensure there are data points before trying to label
        plt.text(len(cumulative_profit) - 1, cumulative_profit[-1], f'{cumulative_profit[-1]:.2f}€', color='b', ha='left', va='bottom')
    if cumulative_winnings:
        plt.text(len(cumulative_winnings) - 1, cumulative_winnings[-1], f'{cumulative_winnings[-1]:.2f}€', color='g', ha='left', va='bottom')
    if cumulative_losses:
        plt.text(len(cumulative_losses) - 1, cumulative_losses[-1], f'{cumulative_losses[-1]:.2f}€', color='r', ha='left', va='bottom')


    # Sauvegarde le graphique dans le dossier de destination
    chart_filename = os.path.join(output_dir, "profit_cumule_expresso_detail.png")
    plt.savefig(chart_filename)
    print(f"\nGraphique de l'évolution du profit détaillé sauvegardé sous '{chart_filename}'.")

    # Display the plot
    plt.show()

    plt.close() # Ferme la figure pour libérer la mémoire

    # --- Étape 2: Sauvegarde du tableau par partie dans un fichier texte ---
    table_filename = os.path.join(output_dir, "recapitulatif_parties_expresso.txt")
    with open(table_filename, 'w', encoding='utf-8') as f:
        f.write("{:<40} {:<10} {:<10} {:<10} {:<10}\n".format("Fichier", "Buy-In (€)", "Prizepool (€)", "Gains (€)", "Profit Net (€)"))
        f.write("-" * 90 + "\n")
        for game in game_details:
            f.write("{:<40} {:<10.2f} {:<10.2f} {:<10.2f} {:<10.2f}\n".format(
                game['filename'], game['buy_in'], game['prizepool'], game['winnings'], game['net_profit']))
    print(f"\nTableau récapitulatif par partie sauvegardé sous '{table_filename}'.")


    # Affichage du récapitulatif final
    print("\n--- Récapitulatif final ---")
    print(f"Total de parties analysées : {len(game_details)}") # Report the number of games in the filtered data
    if freeroll_files_skipped > 0:
         print(f"({freeroll_files_skipped} Freeroll files were skipped as per your choice.)")
    if files_outside_date_range_skipped > 0:
         print(f"({files_outside_date_range_skipped} files were skipped as they were outside the specified date range.)")

    print(f"Profit/Perte total : {sum(summary_data):.2f} €")
    if len(game_details) > 0:
        average_profit = sum(summary_data) / len(game_details)
        print(f"Profit/Perte moyen par partie : {average_profit:.2f} €")
    else:
        print("Aucun fichier valide n'a été trouvé pour la période spécifiée.")

if __name__ == "__main__":
    generate_expresso_summary()